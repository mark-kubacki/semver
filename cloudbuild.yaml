timeout: 180s
# It's handy to later browse the logs trying to learn if an error is common to all runs of a language.
tags: ['golang', 'semver']

steps:
- name: 'gcr.io/cloud-builders/go:debian'
  id: 'gofmt'
  entrypoint: 'bash'
  args: ['-c', 'diff <(echo -n) <(gofmt -s -d $(find . -type f -name "*.go" -not -path "./_*"))']

- name: 'gcr.io/blitznote/golang/ineffassign'
  id: 'ineffassign'
  waitFor: ['gofmt']
  args: ['.']
- name: 'gcr.io/blitznote/golang/golint'
  id: 'lint'
  waitFor: ['gofmt']

# This module has no dependencies outside the stdlib, therefore can be built before fetching those.
- &build_go
  name: 'gcr.io/cloud-builders/go:debian'
  id: 'build Linux amd64, Go current'
  env: ['GOARCH=amd64', 'GOOS=linux']
  args: ['build', '.', 'errors']
#- <<: *build_go
#  id: 'build Windows amd64, Go current'
#  env: ['GOARCH=amd64', 'GOOS=windows']

# Updates the cache of third-party modules on the supplied volume.
# Said volume gets eventually discarded.
- name: 'gcr.io/cloud-builders/gsutil'
  volumes:
  - name: 'third-party-sources'
    path: '/var/go/theirs'
  id: 'get cache'
  entrypoint: 'bash'
  args:
  - -c
  - |
    rm -f go.sum *caddyserver*.go;
    export RELEASE="$$(date --utc +'%Y-H2')";
    if gsutil cp gs://cache_cloudbuild/semver/dependencies-$${RELEASE}.tar.xz ./; then
      tar -C /var/go/theirs/ -xaf "dependencies-$${RELEASE}.tar.xz" && rm "dependencies-$${RELEASE}.tar.xz";
    else
      exit 0;
    fi
- &use_go
  name: 'gcr.io/cloud-builders/go:debian'
  volumes:
  - name: 'third-party-sources'
    path: '/var/go/theirs'
  env: ['GOPATH=/var/go/theirs:/go:/usr/share/gocode', 'GO111MODULE=on']
  id: 'get_dependencies'
  waitFor: ['get cache']
  args: ['mod', 'vendor']

# Now come steps (in Gitlab this were one stage actually) common to most projects written in Golang.
# Ideally run parallel.
- <<: *use_go
  id: 'vet'
  waitFor: ['get_dependencies']
  args: ['vet', './...']
- <<: *use_go
  id: 'unittests'
  waitFor: ['get_dependencies']
  args: ['test', '-v', './...']

# Do not uncomment this as Google Cloud Build for Github lacks the permissions to perform this step.
# Mark needs to issue the build separately, using a different account, for this to succeed.
#- name: 'docker.io/blitznote/debase:16.04'
#  id: 'store dependencies'
#  volumes:
#  - name: 'third-party-sources'
#    path: '/var/go/theirs'
#  entrypoint: 'bash'
#  args:
#  - -c
#  - |
#    tar -C /var/go/theirs/ --sort=name \
#      --numeric-owner --owner=0 --group=0 \
#      --no-acls --no-selinux --no-xattrs \
#      --xz -cf "dependencies-$$(date --utc +'%Y-H2').tar.xz" \
#        $$(ls -1 /var/go/theirs)

#artifacts:
#  objects:
#    location: 'gs://cache_cloudbuild/semver/'
#    paths: ['dependencies-*']
